# HTTP: ACME + redirección permanente a HTTPS
server {
  listen 80;
  server_name proyectosdw.lat www.proyectosdw.lat;

  # ACME (webroot)
  location ^~ /.well-known/acme-challenge/ {
    root /var/www/certbot;
    default_type "text/plain";
  }

  # Todo lo demás -> HTTPS (308 preserva POST)
  location / {
    return 308 https://$host$request_uri;
  }
}

# HTTPS: front + API + report-service + websockets
server {
  listen 443 ssl http2;
  server_name proyectosdw.lat www.proyectosdw.lat;

  # Certs montados desde el host
  ssl_certificate     /etc/letsencrypt/live/proyectosdw.lat/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/proyectosdw.lat/privkey.pem;

  # -------- SPA (Angular) --------
  root /usr/share/nginx/html;
  index index.html;

  # -------- Report-service (PDFs) --------
  # Health explícito
  location = /api/reports/health {
    proxy_pass http://report-service:8080/health;
    proxy_http_version 1.1;

    # Token interno hacia el RS (ejemplo)
    proxy_set_header Authorization "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYWRtaW4ifQ.FvQrTJxDkkSjQRcsmuUtY1C-V5xCMrLlP6kdDPHiO64";
    proxy_set_header Host              $host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    proxy_read_timeout 600s;
    proxy_send_timeout 600s;
    proxy_request_buffering off;
  }

  # PDFs /api/reports/* -> report-service:/reports/*
  location ^~ /api/reports/ {
    proxy_pass http://report-service:8080/reports/;
    proxy_http_version 1.1;

    # Reenvía token del usuario al RS (para que él llame a tu API C#)
    proxy_set_header X-Api-Authorization $http_authorization;

    # Token interno hacia el RS (ejemplo)
    proxy_set_header Authorization "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYWRtaW4ifQ.FvQrTJxDkkSjQRcsmuUtY1C-V5xCMrLlP6kdDPHiO64";

    proxy_set_header Host              $host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    proxy_read_timeout 600s;
    proxy_send_timeout 600s;
    proxy_request_buffering off;
  }

  # -------- API C# --------
  location ^~ /api {
    proxy_pass http://api:8080;  # SIN slash final
    proxy_http_version 1.1;

    # Deja pasar Authorization del front
    proxy_set_header Authorization $http_authorization;

    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    proxy_read_timeout 600s;
    proxy_send_timeout 600s;
    proxy_request_buffering off;

    # Marcar respuestas para verificar que ENTRA a este bloque
    add_header X-API-Proxy on always;
  }

  # -------- SignalR / WebSockets --------
  location ^~ /hubs/ {
    proxy_pass http://api:8080;
    proxy_http_version 1.1;

    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;

    proxy_read_timeout 600s;
    proxy_send_timeout 600s;
    proxy_buffering off;
    proxy_cache_bypass $http_upgrade;
  }

  # -------- SPA fallback --------
  location / {
    try_files $uri $uri/ /index.html;
  }
}
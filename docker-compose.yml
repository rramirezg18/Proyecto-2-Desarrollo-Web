services:
  db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: "Guate!2025Siman"
    ports:
      - "1433:1433"
    volumes:
      - mssqldata:/var/opt/mssql
    healthcheck:
      test: ["CMD-SHELL", "grep -q 'SQL Server is now ready for client connections' /var/opt/mssql/log/errorlog"]
      interval: 5s
      timeout: 3s
      retries: 60
      start_period: 40s

  db-init:
    image: mcr.microsoft.com/mssql-tools
    depends_on:
      db:
        condition: service_healthy
    environment:
      MSSQL_SA_PASSWORD: "Guate!2025Siman"
    volumes:
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./sql/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
    entrypoint: ["/bin/bash", "/docker-entrypoint-initdb.d/init-db.sh"]

  api:
    build:
      context: ./back/Scoreboard
    environment:
      ASPNETCORE_URLS: "http://+:8080"
      ConnectionStrings__DefaultConnection: "Server=db;Database=MarcadorDb;User Id=marcador_app;Password=MarcadorAppPy1;Encrypt=true;TrustServerCertificate=true;MultipleActiveResultSets=true"
    depends_on:
      db:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
    ports:
      - "5000:8080"

  web:
    build:
      context: ./front
      dockerfile: Dockerfile
    depends_on:
      api:
        condition: service_started
    ports:
      - "80:80"


  report-service:
    build:
      context: ./report-service
      dockerfile: docker/Dockerfile
    image: scoreboard-report-service        # opcional, pero útil para nombrar la imagen
    container_name: report-service
    env_file:
      - ./report-service/.env
    environment:
      INTERNAL_SECRET: "pon_un_secreto_largo_y_unico"   # <— DEBE SER EL MISMO que en Nginx
    depends_on:
      api:
        condition: service_started
      redis:
        condition: service_started
    ports:
      - "8080:8080"      # puedes quitarlo si solo accederás vía Nginx
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: redis
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    ports:
      - "6379:6379"
    restart: unless-stopped





volumes:
  mssqldata:
